{"version":3,"file":"taskpane.36ab2667de3a260a50ce.js","mappings":"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","sources":["webpack://outlook-test-interceptor/./src/taskpane/taskpane.ts"],"sourcesContent":["\"use strict\";\r\n/**\r\n * taskpane.ts - Taskpane logic for Outlook Test Interceptor\r\n * Handles UI interactions and email content checking\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validateTaskpaneConfiguration = exports.checkCurrentEmailContent = exports.TaskpaneXMLValidator = exports.NetworkStatusHandler = exports.EmailAnalyzer = void 0;\r\n// Initialize when Office is ready\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Outlook) {\r\n        console.log('Taskpane loaded successfully');\r\n        // Initialize UI based on mode\r\n        initializeTaskpane();\r\n        // Set up network monitoring\r\n        setupNetworkMonitoring();\r\n    }\r\n});\r\n/**\r\n * Class to handle email content analysis\r\n */\r\nclass EmailAnalyzer {\r\n    /**\r\n     * Analyze email content for test-related terms\r\n     * @param content - Email content to analyze\r\n     * @returns EmailAnalysis - Analysis results\r\n     */\r\n    static analyzeContent(content) {\r\n        const lowerContent = content.toLowerCase();\r\n        const testMatches = lowerContent.match(/\\btest\\b/g) || [];\r\n        return {\r\n            hasTestContent: testMatches.length > 0,\r\n            testCount: testMatches.length,\r\n            contentLength: content.length,\r\n            analysisTimestamp: new Date()\r\n        };\r\n    }\r\n    /**\r\n     * Get detailed test content locations\r\n     * @param content - Email content to analyze\r\n     * @returns Array of line numbers where test content is found\r\n     */\r\n    static getTestLocations(content) {\r\n        const lines = content.split('\\n');\r\n        const locations = [];\r\n        lines.forEach((line, index) => {\r\n            if (line.toLowerCase().includes('test')) {\r\n                locations.push(index + 1);\r\n            }\r\n        });\r\n        return locations;\r\n    }\r\n}\r\nexports.EmailAnalyzer = EmailAnalyzer;\r\n/**\r\n * Class to handle network status and offline functionality\r\n */\r\nclass NetworkStatusHandler {\r\n    constructor() {\r\n        this.listeners = [];\r\n        this.isCurrentlyOnline = navigator.onLine;\r\n        this.setupEventListeners();\r\n    }\r\n    setupEventListeners() {\r\n        window.addEventListener('online', () => {\r\n            this.isCurrentlyOnline = true;\r\n            this.notifyListeners(true);\r\n            console.log('Network: Online');\r\n        });\r\n        window.addEventListener('offline', () => {\r\n            this.isCurrentlyOnline = false;\r\n            this.notifyListeners(false);\r\n            console.log('Network: Offline');\r\n        });\r\n    }\r\n    isOnline() {\r\n        return this.isCurrentlyOnline;\r\n    }\r\n    addStatusListener(callback) {\r\n        this.listeners.push(callback);\r\n    }\r\n    notifyListeners(status) {\r\n        this.listeners.forEach(callback => callback(status));\r\n    }\r\n}\r\nexports.NetworkStatusHandler = NetworkStatusHandler;\r\n/**\r\n * XML Validation for taskpane operations\r\n */\r\nclass TaskpaneXMLValidator {\r\n    /**\r\n     * Validate XML configuration\r\n     * @param xmlContent - XML content to validate\r\n     * @returns Promise<boolean> - Validation result\r\n     */\r\n    static async validateConfiguration(xmlContent) {\r\n        try {\r\n            const parser = new DOMParser();\r\n            const doc = parser.parseFromString(xmlContent, 'application/xml');\r\n            // Check for XML parsing errors\r\n            const parseError = doc.getElementsByTagName('parsererror');\r\n            if (parseError.length > 0) {\r\n                console.error('XML configuration error:', parseError[0].textContent);\r\n                return false;\r\n            }\r\n            // Validate specific configuration elements if needed\r\n            console.log('XML configuration is valid');\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            console.error('XML validation error:', error);\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Validate manifest XML compliance\r\n     * @param manifestContent - Manifest XML content\r\n     * @returns boolean - True if compliant with Office Add-in standards\r\n     */\r\n    static validateManifest(manifestContent) {\r\n        try {\r\n            const parser = new DOMParser();\r\n            const doc = parser.parseFromString(manifestContent, 'application/xml');\r\n            // Check for required elements\r\n            const requiredElements = ['OfficeApp', 'Id', 'Version', 'DisplayName'];\r\n            for (const elementName of requiredElements) {\r\n                if (doc.getElementsByTagName(elementName).length === 0) {\r\n                    console.error(`Required manifest element '${elementName}' not found`);\r\n                    return false;\r\n                }\r\n            }\r\n            console.log('Manifest XML is compliant');\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            console.error('Manifest validation error:', error);\r\n            return false;\r\n        }\r\n    }\r\n}\r\nexports.TaskpaneXMLValidator = TaskpaneXMLValidator;\r\n// Global instances\r\nlet networkHandler;\r\n/**\r\n * Initialize the taskpane based on URL parameters\r\n */\r\nfunction initializeTaskpane() {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const mode = urlParams.get('mode');\r\n    if (mode === 'confirm') {\r\n        console.log('Initializing confirmation dialog mode');\r\n        setupConfirmationDialog();\r\n    }\r\n    else {\r\n        console.log('Initializing regular taskpane mode');\r\n        setupRegularTaskpane();\r\n    }\r\n}\r\n/**\r\n * Set up network monitoring\r\n */\r\nfunction setupNetworkMonitoring() {\r\n    networkHandler = new NetworkStatusHandler();\r\n    // Add listener to update UI when network status changes\r\n    networkHandler.addStatusListener((isOnline) => {\r\n        updateNetworkStatusUI(isOnline);\r\n    });\r\n    // Initial status update\r\n    updateNetworkStatusUI(networkHandler.isOnline());\r\n}\r\n/**\r\n * Update network status in UI\r\n * @param isOnline - Current network status\r\n */\r\nfunction updateNetworkStatusUI(isOnline) {\r\n    const statusElements = document.querySelectorAll('.status-indicator');\r\n    statusElements.forEach(element => {\r\n        if (!element.textContent?.includes('Warning') && !element.textContent?.includes('✅')) {\r\n            element.className = `status-indicator ${isOnline ? 'status-online' : 'status-offline'}`;\r\n            element.textContent = `Status: ${isOnline ? 'Online' : 'Offline'}`;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Set up confirmation dialog functionality\r\n */\r\nfunction setupConfirmationDialog() {\r\n    const confirmationDialog = document.getElementById('confirmation-dialog');\r\n    const taskpaneContent = document.getElementById('taskpane-content');\r\n    if (confirmationDialog && taskpaneContent) {\r\n        confirmationDialog.classList.remove('hidden');\r\n        taskpaneContent.classList.add('hidden');\r\n    }\r\n}\r\n/**\r\n * Set up regular taskpane functionality\r\n */\r\nfunction setupRegularTaskpane() {\r\n    const confirmationDialog = document.getElementById('confirmation-dialog');\r\n    const taskpaneContent = document.getElementById('taskpane-content');\r\n    if (confirmationDialog && taskpaneContent) {\r\n        confirmationDialog.classList.add('hidden');\r\n        taskpaneContent.classList.remove('hidden');\r\n    }\r\n}\r\n/**\r\n * Handle manual email checking\r\n */\r\nfunction checkCurrentEmailContent() {\r\n    const item = Office.context.mailbox.item;\r\n    if (!item) {\r\n        showTaskpaneStatus('No email item found', false);\r\n        return;\r\n    }\r\n    // Show loading status\r\n    showTaskpaneStatus('Checking email content...', true);\r\n    // Get email body content\r\n    item.body.getAsync(Office.CoercionType.Text, (result) => {\r\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n            const analysis = EmailAnalyzer.analyzeContent(result.value);\r\n            if (analysis.hasTestContent) {\r\n                const message = `⚠️ Warning: Found ${analysis.testCount} instance(s) of \"test\"`;\r\n                showTaskpaneStatus(message, false);\r\n                // Show detailed analysis if multiple instances\r\n                if (analysis.testCount > 1) {\r\n                    const locations = EmailAnalyzer.getTestLocations(result.value);\r\n                    console.log('Test content found on lines:', locations);\r\n                }\r\n                // Add notification to email\r\n                item.notificationMessages.addAsync('manual-check-warning', {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                    message: `Warning: Email contains \"test\" content (${analysis.testCount} instances) - review before sending`,\r\n                    icon: 'Icon.16x16',\r\n                    persistent: true\r\n                });\r\n            }\r\n            else {\r\n                showTaskpaneStatus('✅ Email content verified - no \"test\" found', true);\r\n                // Clear any existing warnings\r\n                item.notificationMessages.removeAsync('manual-check-warning');\r\n            }\r\n        }\r\n        else {\r\n            showTaskpaneStatus('Error: Unable to check email content', false);\r\n            console.error('Failed to get email body:', result.error);\r\n        }\r\n    });\r\n}\r\nexports.checkCurrentEmailContent = checkCurrentEmailContent;\r\n/**\r\n * Show status message in taskpane\r\n * @param message - Status message to display\r\n * @param isSuccess - Whether this is a success or warning message\r\n */\r\nfunction showTaskpaneStatus(message, isSuccess) {\r\n    const statusElement = document.getElementById('taskpane-status');\r\n    if (statusElement) {\r\n        statusElement.textContent = message;\r\n        statusElement.className = `status-indicator ${isSuccess ? 'status-online' : 'status-offline'}`;\r\n        // Auto-clear status after 5 seconds (except for warnings)\r\n        if (isSuccess || message.includes('Error')) {\r\n            setTimeout(() => {\r\n                updateNetworkStatusUI(networkHandler?.isOnline() ?? true);\r\n            }, 5000);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Handle offline functionality for email processing\r\n */\r\nfunction handleOfflineEmailProcess() {\r\n    if (!networkHandler?.isOnline()) {\r\n        console.log('Offline mode: Email will be queued for sending');\r\n        // Show offline notification\r\n        showTaskpaneStatus('Offline: Changes will be saved locally', false);\r\n        // In a real implementation, you might save the email state\r\n        // to local storage for later processing when online\r\n        localStorage.setItem('offline-email-check', JSON.stringify({\r\n            timestamp: new Date().toISOString(),\r\n            checked: true\r\n        }));\r\n    }\r\n}\r\n/**\r\n * Validate any XML configuration used in the taskpane\r\n * @param configXML - XML configuration to validate\r\n */\r\nasync function validateTaskpaneConfiguration(configXML) {\r\n    try {\r\n        const isValid = await TaskpaneXMLValidator.validateConfiguration(configXML);\r\n        if (isValid) {\r\n            console.log('Taskpane configuration XML is valid');\r\n        }\r\n        else {\r\n            console.error('Taskpane configuration XML validation failed');\r\n            showTaskpaneStatus('Configuration error detected', false);\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error('Error validating taskpane configuration:', error);\r\n    }\r\n}\r\nexports.validateTaskpaneConfiguration = validateTaskpaneConfiguration;\r\n// Export functions for global access\r\nwindow.checkCurrentEmail = checkCurrentEmailContent;\r\nwindow.validateXMLContent = TaskpaneXMLValidator.validateConfiguration;\r\n"],"names":["Office","onReady","info","host","HostType","Outlook","console","log","URLSearchParams","window","location","search","get","confirmationDialog","document","getElementById","taskpaneContent","classList","remove","add","setupConfirmationDialog","setupRegularTaskpane","networkHandler","NetworkStatusHandler","addStatusListener","isOnline","updateNetworkStatusUI","EmailAnalyzer","analyzeContent","content","testMatches","toLowerCase","match","hasTestContent","length","testCount","contentLength","analysisTimestamp","Date","getTestLocations","lines","split","locations","forEach","line","index","includes","push","constructor","this","listeners","isCurrentlyOnline","navigator","onLine","setupEventListeners","addEventListener","notifyListeners","callback","status","querySelectorAll","element","textContent","className","showTaskpaneStatus","message","isSuccess","statusElement","setTimeout","checkCurrentEmail","item","context","mailbox","body","getAsync","CoercionType","Text","result","AsyncResultStatus","Succeeded","analysis","value","notificationMessages","addAsync","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","removeAsync","error","validateXMLContent","validateConfiguration","xmlContent","parseError","DOMParser","parseFromString","getElementsByTagName","validateManifest","manifestContent","doc","requiredElements","elementName"],"sourceRoot":""}