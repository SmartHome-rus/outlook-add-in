(()=>{"use strict";Office.onReady(e=>{e.host===Office.HostType.Outlook&&console.log("Outlook Test Interceptor loaded successfully")});class e{constructor(){this.status={isOnline:navigator.onLine,lastCheckTime:new Date},window.addEventListener("online",this.updateOnlineStatus.bind(this)),window.addEventListener("offline",this.updateOfflineStatus.bind(this))}static getInstance(){return e.instance||(e.instance=new e),e.instance}updateOnlineStatus(){this.status.isOnline=!0,this.status.lastCheckTime=new Date,console.log("Network status: Online")}updateOfflineStatus(){this.status.isOnline=!1,this.status.lastCheckTime=new Date,console.log("Network status: Offline")}getStatus(){return{...this.status}}isOnline(){return this.status.isOnline}}"undefined"!=typeof Office&&(Office.actions.associate("onMessageSend",function(t){console.log("onMessageSend event triggered");const o=Office.context.mailbox.item;if(!o)return console.error("No item found"),void t.completed({allowEvent:!0});const n=e.getInstance().isOnline();console.log("Network status: "+(n?"Online":"Offline")),o.body.getAsync(Office.CoercionType.Text,e=>{e.status===Office.AsyncResultStatus.Succeeded?e.value.toLowerCase().includes("test")?(console.log('Found "test" in email body'),n?new Promise((e,t)=>{try{const o={height:60,width:40,displayInIframe:!1};Office.context.ui.openDialog(window.location.origin+"/taskpane.html?mode=confirm",o,o=>{if(o.status===Office.AsyncResultStatus.Succeeded){const n=o.value;n.addEventHandler(Office.EventType.DialogMessageReceived,o=>{try{const t=JSON.parse(o.message);n.close(),"send"===t.action?e(!0):e(!1)}catch(e){console.error("Error parsing dialog message:",e),n.close(),t(e)}}),n.addEventHandler(Office.EventType.DialogEventReceived,t=>{console.log("Dialog event:",t.error),e(!1)})}else console.error("Failed to open dialog:",o.error),t(o.error)})}catch(e){console.error("Error creating dialog:",e),t(e)}}).then(e=>{e?(console.log("User chose to send anyway"),t.completed({allowEvent:!0})):(console.log("User chose to cancel sending"),t.completed({allowEvent:!1}))}).catch(e=>{console.error("Dialog error:",e),t.completed({allowEvent:!0})}):(console.log("Offline mode: Allowing email to go to Outbox"),Office.context.mailbox.item.notificationMessages.addAsync("offline-notification",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:"Offline: Email will be sent when connection is restored.",icon:"Icon.16x16",persistent:!1}),t.completed({allowEvent:!0}))):(console.log('No "test" found in email body'),t.completed({allowEvent:!0})):(console.error("Failed to get email body:",e.error),t.completed({allowEvent:!0}))})}),Office.actions.associate("checkBeforeSend",function(e){console.log("Manual check before send triggered");const t=Office.context.mailbox.item;if(!t)return console.error("No item found for manual check"),void e.completed();t.body.getAsync(Office.CoercionType.Text,o=>{o.status===Office.AsyncResultStatus.Succeeded?o.value.toLowerCase().includes("test")?t.notificationMessages.addAsync("test-found-notification",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:'Warning: Email contains "test". Please review before sending.',icon:"Icon.16x16",persistent:!0}):t.notificationMessages.addAsync("no-test-notification",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:'Email content verified - no "test" found.',icon:"Icon.16x16",persistent:!1}):console.error("Failed to get email body for manual check:",o.error),e.completed()})}),e.getInstance())})();
//# sourceMappingURL=commands.a827c8a4ccbb119d3a02.js.map