{"version":3,"file":"commands.bf472546fd73e3c12f7a.js","mappings":"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","sources":["webpack://outlook-test-interceptor/./src/commands/commands.ts"],"sourcesContent":["\"use strict\";\r\n/**\r\n * commands.ts - Core logic for Outlook Test Interceptor Add-in\r\n * Handles email send interception and validation\r\n */\r\n// Office JavaScript API initialization\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Outlook) {\r\n        console.log('Outlook Test Interceptor loaded successfully');\r\n    }\r\n});\r\n/**\r\n * Class to handle network status monitoring\r\n */\r\nclass NetworkStatusManager {\r\n    constructor() {\r\n        this.status = {\r\n            isOnline: navigator.onLine,\r\n            lastCheckTime: new Date()\r\n        };\r\n        // Set up event listeners for online/offline detection\r\n        window.addEventListener('online', this.updateOnlineStatus.bind(this));\r\n        window.addEventListener('offline', this.updateOfflineStatus.bind(this));\r\n    }\r\n    static getInstance() {\r\n        if (!NetworkStatusManager.instance) {\r\n            NetworkStatusManager.instance = new NetworkStatusManager();\r\n        }\r\n        return NetworkStatusManager.instance;\r\n    }\r\n    updateOnlineStatus() {\r\n        this.status.isOnline = true;\r\n        this.status.lastCheckTime = new Date();\r\n        console.log('Network status: Online');\r\n    }\r\n    updateOfflineStatus() {\r\n        this.status.isOnline = false;\r\n        this.status.lastCheckTime = new Date();\r\n        console.log('Network status: Offline');\r\n    }\r\n    getStatus() {\r\n        return { ...this.status };\r\n    }\r\n    isOnline() {\r\n        return this.status.isOnline;\r\n    }\r\n}\r\n/**\r\n * XML Validation utility class\r\n */\r\nclass XMLValidator {\r\n    /**\r\n     * Validates XML string for compliance\r\n     * @param xmlString - The XML string to validate\r\n     * @returns Promise<boolean> - True if valid, false otherwise\r\n     */\r\n    static async validateXML(xmlString) {\r\n        try {\r\n            const parser = new DOMParser();\r\n            const doc = parser.parseFromString(xmlString, 'application/xml');\r\n            // Check for parsing errors\r\n            const parseError = doc.getElementsByTagName('parsererror');\r\n            if (parseError.length > 0) {\r\n                console.error('XML Parsing Error:', parseError[0].textContent);\r\n                return false;\r\n            }\r\n            // Additional validation can be added here\r\n            console.log('XML validation successful');\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            console.error('XML validation failed:', error);\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Validates XML against a schema (basic implementation)\r\n     * @param xmlString - The XML string to validate\r\n     * @param schemaRules - Basic schema rules object\r\n     * @returns boolean - True if compliant\r\n     */\r\n    static validateAgainstSchema(xmlString, schemaRules) {\r\n        try {\r\n            const parser = new DOMParser();\r\n            const doc = parser.parseFromString(xmlString, 'application/xml');\r\n            // Basic schema validation logic\r\n            if (schemaRules.requiredElements) {\r\n                for (const element of schemaRules.requiredElements) {\r\n                    if (doc.getElementsByTagName(element).length === 0) {\r\n                        console.error(`Required element '${element}' not found`);\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            console.error('Schema validation failed:', error);\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Main event handler for automatic send interception\r\n * This function is called automatically when a message is about to be sent\r\n */\r\nfunction onMessageSend(event) {\r\n    console.log('=== AUTOMATIC SEND INTERCEPTION TRIGGERED ===');\r\n    try {\r\n        // Get the current item (email being composed)\r\n        const item = Office.context.mailbox.item;\r\n        if (!item) {\r\n            console.error('No item found in onMessageSend');\r\n            event.completed({ allowEvent: true });\r\n            return;\r\n        }\r\n        // Get the network status\r\n        const networkManager = NetworkStatusManager.getInstance();\r\n        const isOnline = networkManager.isOnline();\r\n        console.log(`Network status: ${isOnline ? 'Online' : 'Offline'}`);\r\n        // Get the email body to check for \"test\"\r\n        item.body.getAsync(Office.CoercionType.Text, (result) => {\r\n            try {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    const emailBody = result.value.toLowerCase();\r\n                    console.log('Email body retrieved, checking for \"test\"...');\r\n                    // Check if email contains \"test\"\r\n                    if (emailBody.includes('test')) {\r\n                        console.log('üö® TEST DETECTED in email body - Blocking send');\r\n                        // Show error notification that will block the send\r\n                        item.notificationMessages.addAsync('test-found-blocking', {\r\n                            type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                            message: 'üö® SEND BLOCKED: Email contains \"test\" - Please review and edit before sending!',\r\n                            icon: 'Icon.16x16',\r\n                            persistent: true\r\n                        });\r\n                        // Block the send\r\n                        event.completed({ allowEvent: false });\r\n                    }\r\n                    else {\r\n                        console.log('‚úÖ No \"test\" found - Allowing send');\r\n                        // Show brief success notification if online\r\n                        if (isOnline) {\r\n                            item.notificationMessages.addAsync('send-approved', {\r\n                                type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                                message: '‚úÖ Email approved - Sending...',\r\n                                icon: 'Icon.16x16',\r\n                                persistent: false\r\n                            });\r\n                        }\r\n                        // Allow the send\r\n                        event.completed({ allowEvent: true });\r\n                    }\r\n                }\r\n                else {\r\n                    console.error('Failed to get email body:', result.error);\r\n                    // Show warning but allow send to prevent blocking legitimate emails\r\n                    item.notificationMessages.addAsync('check-failed', {\r\n                        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                        message: '‚ö†Ô∏è Unable to check email content - Sending anyway',\r\n                        icon: 'Icon.16x16',\r\n                        persistent: false\r\n                    });\r\n                    event.completed({ allowEvent: true });\r\n                }\r\n            }\r\n            catch (bodyError) {\r\n                console.error('Error processing email body:', bodyError);\r\n                event.completed({ allowEvent: true });\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        console.error('Error in onMessageSend:', error);\r\n        event.completed({ allowEvent: true });\r\n    }\r\n}\r\n/**\r\n * Shows the \"test found\" confirmation dialog\r\n * @returns Promise<boolean> - True if user wants to send anyway\r\n */\r\nfunction showTestFoundDialog() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            // Create dialog options\r\n            const dialogOptions = {\r\n                height: 60,\r\n                width: 40,\r\n                displayInIframe: false\r\n            };\r\n            // Open dialog\r\n            Office.context.ui.openDialog(window.location.origin + '/taskpane.html?mode=confirm', dialogOptions, (result) => {\r\n                if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n                    const dialog = result.value;\r\n                    // Listen for messages from dialog\r\n                    dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {\r\n                        try {\r\n                            const message = JSON.parse(arg.message);\r\n                            dialog.close();\r\n                            if (message.action === 'send') {\r\n                                resolve(true);\r\n                            }\r\n                            else {\r\n                                resolve(false);\r\n                            }\r\n                        }\r\n                        catch (error) {\r\n                            console.error('Error parsing dialog message:', error);\r\n                            dialog.close();\r\n                            reject(error);\r\n                        }\r\n                    });\r\n                    // Handle dialog close events\r\n                    dialog.addEventHandler(Office.EventType.DialogEventReceived, (arg) => {\r\n                        console.log('Dialog event:', arg.error);\r\n                        resolve(false); // Default to not sending if dialog is closed unexpectedly\r\n                    });\r\n                }\r\n                else {\r\n                    console.error('Failed to open dialog:', result.error);\r\n                    reject(result.error);\r\n                }\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.error('Error creating dialog:', error);\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Manual check function that can be called from ribbon button\r\n */\r\nfunction checkBeforeSend(event) {\r\n    console.log('=== CHECK BEFORE SEND TRIGGERED ===');\r\n    const item = Office.context.mailbox.item;\r\n    if (!item) {\r\n        console.error('No item found for manual check');\r\n        event.completed();\r\n        return;\r\n    }\r\n    console.log('Getting email body content...');\r\n    // Get the email body to check for \"test\"\r\n    item.body.getAsync(Office.CoercionType.Text, (result) => {\r\n        if (result.status === Office.AsyncResultStatus.Succeeded) {\r\n            const emailBody = result.value.toLowerCase();\r\n            if (emailBody.includes('test')) {\r\n                // Show warning notification\r\n                item.notificationMessages.addAsync('test-found-notification', {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\r\n                    message: '‚ö†Ô∏è WARNING: Email contains \"test\" - Review before sending!',\r\n                    icon: 'Icon.16x16',\r\n                    persistent: true\r\n                });\r\n                // Also show in console for debugging\r\n                console.log('TEST FOUND in email body - Warning displayed');\r\n            }\r\n            else {\r\n                // Show all clear notification\r\n                item.notificationMessages.addAsync('no-test-notification', {\r\n                    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\r\n                    message: '‚úÖ Email verified - Safe to send (no \"test\" found)',\r\n                    icon: 'Icon.16x16',\r\n                    persistent: false\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            console.error('Failed to get email body for manual check:', result.error);\r\n        }\r\n        event.completed();\r\n    });\r\n}\r\n/**\r\n * Function to validate any XML content in the add-in\r\n * This can be called when processing XML data\r\n */\r\nasync function validateXMLContent(xmlContent) {\r\n    try {\r\n        // Basic XML compliance check\r\n        const isValid = await XMLValidator.validateXML(xmlContent);\r\n        if (isValid) {\r\n            console.log('XML content is compliant');\r\n            return true;\r\n        }\r\n        else {\r\n            console.error('XML content is not compliant');\r\n            return false;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.error('XML validation error:', error);\r\n        return false;\r\n    }\r\n}\r\n// Register functions for Office add-in\r\nif (typeof Office !== 'undefined') {\r\n    // Register event handlers\r\n    Office.actions.associate('onMessageSend', onMessageSend);\r\n    Office.actions.associate('checkBeforeSend', checkBeforeSend);\r\n    // Initialize network status manager\r\n    NetworkStatusManager.getInstance();\r\n}\r\n"],"names":["Office","onReady","info","host","HostType","Outlook","console","log","NetworkStatusManager","constructor","this","status","isOnline","navigator","onLine","lastCheckTime","Date","window","addEventListener","updateOnlineStatus","bind","updateOfflineStatus","getInstance","instance","getStatus","actions","associate","event","item","context","mailbox","error","completed","allowEvent","body","getAsync","CoercionType","Text","result","AsyncResultStatus","Succeeded","emailBody","value","toLowerCase","includes","notificationMessages","addAsync","type","MailboxEnums","ItemNotificationMessageType","ErrorMessage","message","icon","persistent","InformationalMessage","bodyError"],"sourceRoot":""}