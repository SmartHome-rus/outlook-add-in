(()=>{"use strict";Office.onReady(e=>{e.host===Office.HostType.Outlook&&console.log("Outlook Test Interceptor loaded successfully")});class e{constructor(){this.status={isOnline:navigator.onLine,lastCheckTime:new Date},window.addEventListener("online",this.updateOnlineStatus.bind(this)),window.addEventListener("offline",this.updateOfflineStatus.bind(this))}static getInstance(){return e.instance||(e.instance=new e),e.instance}updateOnlineStatus(){this.status.isOnline=!0,this.status.lastCheckTime=new Date,console.log("Network status: Online")}updateOfflineStatus(){this.status.isOnline=!1,this.status.lastCheckTime=new Date,console.log("Network status: Offline")}getStatus(){return{...this.status}}isOnline(){return this.status.isOnline}}"undefined"!=typeof Office&&(Office.actions.associate("onMessageSend",function(t){console.log("=== AUTOMATIC SEND INTERCEPTION TRIGGERED ===");try{const n=Office.context.mailbox.item;if(!n)return console.error("No item found in onMessageSend"),void t.completed({allowEvent:!0});const o=e.getInstance().isOnline();console.log("Network status: "+(o?"Online":"Offline")),n.body.getAsync(Office.CoercionType.Text,e=>{try{if(e.status===Office.AsyncResultStatus.Succeeded){const s=e.value.toLowerCase();console.log('Email body retrieved, checking for "test"...'),s.includes("test")?(console.log("üö® TEST DETECTED in email body - Blocking send"),n.notificationMessages.addAsync("test-found-blocking",{type:Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,message:'üö® SEND BLOCKED: Email contains "test" - Please review and edit before sending!',icon:"Icon.16x16",persistent:!0}),t.completed({allowEvent:!1})):(console.log('‚úÖ No "test" found - Allowing send'),o&&n.notificationMessages.addAsync("send-approved",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:"‚úÖ Email approved - Sending...",icon:"Icon.16x16",persistent:!1}),t.completed({allowEvent:!0}))}else console.error("Failed to get email body:",e.error),n.notificationMessages.addAsync("check-failed",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:"‚ö†Ô∏è Unable to check email content - Sending anyway",icon:"Icon.16x16",persistent:!1}),t.completed({allowEvent:!0})}catch(e){console.error("Error processing email body:",e),t.completed({allowEvent:!0})}})}catch(e){console.error("Error in onMessageSend:",e),t.completed({allowEvent:!0})}}),Office.actions.associate("checkBeforeSend",function(e){console.log("=== CHECK BEFORE SEND TRIGGERED ===");const t=Office.context.mailbox.item;if(!t)return console.error("No item found for manual check"),void e.completed();console.log("Getting email body content..."),t.body.getAsync(Office.CoercionType.Text,n=>{n.status===Office.AsyncResultStatus.Succeeded?n.value.toLowerCase().includes("test")?(t.notificationMessages.addAsync("test-found-notification",{type:Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,message:'‚ö†Ô∏è WARNING: Email contains "test" - Review before sending!',icon:"Icon.16x16",persistent:!0}),console.log("TEST FOUND in email body - Warning displayed")):t.notificationMessages.addAsync("no-test-notification",{type:Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,message:'‚úÖ Email verified - Safe to send (no "test" found)',icon:"Icon.16x16",persistent:!1}):console.error("Failed to get email body for manual check:",n.error),e.completed()})}),e.getInstance())})();
//# sourceMappingURL=commands.bf472546fd73e3c12f7a.js.map